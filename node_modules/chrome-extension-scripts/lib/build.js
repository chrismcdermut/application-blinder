'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _child_process = require('child_process');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _safe = require('colors/safe');

var _safe2 = _interopRequireDefault(_safe);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _easyRequire = require('./utils/easyRequire');

var _easyRequire2 = _interopRequireDefault(_easyRequire);

var _override = require('./webpack/override');

var _override2 = _interopRequireDefault(_override);

var _log = require('./utils/log');

var log = _interopRequireWildcard(_log);

var _shared = require('./shared');

var _webpackConfig = require('./webpack/webpack.config.prod');

var _webpackConfig2 = _interopRequireDefault(_webpackConfig);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.env.NODE_ENV = 'production';

// Native


// npm


// our


/**
 * Clear reelase directory
 *
 * @param  {String} path Release directory path
 * @return {Promise}
 */
function prepareReleaseDir(options) {
  return new Promise(function (resolve, reject) {
    _fsExtra2.default.remove(options.release, function () {
      _fsExtra2.default.mkdirs(options.release, function () {
        resolve();
      });
    });
  });
}

/**
 * Build production release
 *
 * @param  {Object} webpackConfig
 * @return {Promise}
 */
function webpackProduction(webpackConfig) {
  return new Promise(function (resolve, reject) {
    return (0, _easyRequire2.default)(function () {

      // TODO: Does not log :S
      log.pending('Processing webpack build');

      (0, _webpack2.default)(webpackConfig, function (fatalError, stats) {
        var jsonStats = stats && stats.toJson();

        // We can save jsonStats to be analyzed with
        // http://webpack.github.io/analyse or
        // https://github.com/robertknight/webpack-bundle-size-analyzer.
        // var fs = require('fs')
        // fs.writeFileSync('./bundle-stats.json', JSON.stringify(jsonStats))

        var warnings = jsonStats && jsonStats.warnings || [];

        warnings.forEach(function (warning) {
          log.pending('webpack warning: ' + warning);
        });

        var buildError = fatalError || jsonStats && jsonStats.errors[0];

        if (buildError) {
          reject('webpack error: ' + buildError);
          return;
        }

        var result = stats.toString({
          colors: true,
          version: false,
          hash: false,
          timings: false,
          chunks: false,
          chunkModules: false
        });

        log.success('Done with: ' + result);
        resolve();
      });
    });
  });
}

/**
 * Generate extension file inside release path
 *
 * @param  {String} path Release directory path
 * @return {Promise}
 */
function makeExtension(options) {
  return function () {
    return new Promise(function (resolve, reject) {
      // TODO detect system and Chrome path
      var chromeBinaryPath = '/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome';
      console.log(_safe2.default.yellow('Building extension into \'' + options.release + '\''));

      setTimeout(function () {
        var commandParts = ['\'' + chromeBinaryPath + '\'', '--pack-extension=' + options.output];

        if (options.key) {
          commandParts.push('--pack-extension-key=' + options.key);
        }

        var command = '$(' + commandParts.join(" ") + ')';

        (0, _child_process.exec)(command, function (error, stdout, stderr) {
          if (stdout) {
            console.log(_safe2.default.yellow('stdout: ' + stdout));
          }

          if (stderr) {
            return reject('stderr: ' + stderr);
          }

          if (error !== null) {
            return reject('exec error: ' + stderr);
          }

          resolve('Extension builded in \'' + options.release + '\'');
        });
        // Long enought to prevent some unexpected errors
      }, 1000);
    });
  };
}

function build(options) {
  options = _extends({}, options, {
    key: options.key && _path2.default.resolve(options.key),
    release: options.output,
    output: _path2.default.join(options.output, 'source')
  });

  // TODO: check if release directory contain *.key file
  // If yes, then ask user if
  // 1) want to use it as key for build
  // 2) really really really want to override it
  prepareReleaseDir(options).then((0, _shared.prepareManifest)(options)).then(function (Manifest) {
    return (0, _webpackConfig2.default)(Manifest);
  }).then(webpackProduction).then(makeExtension(options))
  // Extension done
  .then(function (message) {
    console.log(_safe2.default.green(message));
  })
  // Some error happened
  .catch(function (error) {
    console.log(_safe2.default.red(error.stack || error));
  });
}

module.exports = build;
//# sourceMappingURL=data:application/json;base64,