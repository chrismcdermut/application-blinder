'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (htmlFilepath, src, build) {
  log.pending('Making html \'' + htmlFilepath + '\'');

  // Read body content
  var htmlContent = _fsExtra2.default.readFileSync(_path2.default.resolve(src, htmlFilepath), { encoding: "utf8" });

  // Get just path and name ie: 'popup/index'
  var bareFilepath = Remove.extension(htmlFilepath);

  var scriptFilepath = bareFilepath + '.js';

  var webpackScriptUrl = process.env.NODE_ENV == "development" ? _path2.default.join("https://localhost:3001", scriptFilepath) : '/' + scriptFilepath;
  var webpackScript = '<script src="' + webpackScriptUrl + '" async defer></script>';

  (0, _script2.default)(scriptFilepath, build);

  var html = makeLayout({
    body: htmlContent,
    script: webpackScript
  });

  var fullHtmlPath = _path2.default.join(build, htmlFilepath);

  _fsExtra2.default.mkdirsSync(Remove.file(fullHtmlPath));

  _fsExtra2.default.writeFileSync(fullHtmlPath, html);

  log.done();

  return scriptFilepath;
};

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _log = require('../../../utils/log');

var log = _interopRequireWildcard(_log);

var _remove = require('../../../utils/remove');

var Remove = _interopRequireWildcard(_remove);

var _script = require('./script');

var _script2 = _interopRequireDefault(_script);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var makeLayout = function makeLayout(_ref) {
  var script = _ref.script;
  var body = _ref.body;

  return '<!DOCTYPE html>\n<html>\n  <head>\n    <meta charSet="utf-8" />\n    <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" />\n  </head>\n  <body>\n    ' + body + '\n    ' + script + '\n  </body>\n</html>';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tYW5pZmVzdC9wcm9jZXNzb3IvbGliL2h0bWwuanMiXSwibmFtZXMiOlsiaHRtbEZpbGVwYXRoIiwic3JjIiwiYnVpbGQiLCJsb2ciLCJwZW5kaW5nIiwiaHRtbENvbnRlbnQiLCJyZWFkRmlsZVN5bmMiLCJyZXNvbHZlIiwiZW5jb2RpbmciLCJiYXJlRmlsZXBhdGgiLCJSZW1vdmUiLCJleHRlbnNpb24iLCJzY3JpcHRGaWxlcGF0aCIsIndlYnBhY2tTY3JpcHRVcmwiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJqb2luIiwid2VicGFja1NjcmlwdCIsImh0bWwiLCJtYWtlTGF5b3V0IiwiYm9keSIsInNjcmlwdCIsImZ1bGxIdG1sUGF0aCIsIm1rZGlyc1N5bmMiLCJmaWxlIiwid3JpdGVGaWxlU3luYyIsImRvbmUiXSwibWFwcGluZ3MiOiI7Ozs7OztrQkF1QmUsVUFBU0EsWUFBVCxFQUF1QkMsR0FBdkIsRUFBNEJDLEtBQTVCLEVBQW1DO0FBQ2hEQyxNQUFJQyxPQUFKLG9CQUE0QkosWUFBNUI7O0FBRUE7QUFDQSxNQUFNSyxjQUFjLGtCQUFHQyxZQUFILENBQWdCLGVBQUtDLE9BQUwsQ0FBYU4sR0FBYixFQUFrQkQsWUFBbEIsQ0FBaEIsRUFBaUQsRUFBQ1EsVUFBVSxNQUFYLEVBQWpELENBQXBCOztBQUVBO0FBQ0EsTUFBTUMsZUFBZUMsT0FBT0MsU0FBUCxDQUFpQlgsWUFBakIsQ0FBckI7O0FBRUEsTUFBTVksaUJBQW9CSCxZQUFwQixRQUFOOztBQUVBLE1BQU1JLG1CQUFtQkMsUUFBUUMsR0FBUixDQUFZQyxRQUFaLElBQXdCLGFBQXhCLEdBQXdDLGVBQUtDLElBQUwsQ0FBVSx3QkFBVixFQUFvQ0wsY0FBcEMsQ0FBeEMsU0FBa0dBLGNBQTNIO0FBQ0EsTUFBTU0sa0NBQWdDTCxnQkFBaEMsNEJBQU47O0FBRUEsd0JBQU9ELGNBQVAsRUFBdUJWLEtBQXZCOztBQUVBLE1BQU1pQixPQUFPQyxXQUFXO0FBQ3RCQyxVQUFRaEIsV0FEYztBQUV0QmlCLFlBQVFKO0FBRmMsR0FBWCxDQUFiOztBQUtBLE1BQU1LLGVBQWUsZUFBS04sSUFBTCxDQUFVZixLQUFWLEVBQWlCRixZQUFqQixDQUFyQjs7QUFFQSxvQkFBR3dCLFVBQUgsQ0FBY2QsT0FBT2UsSUFBUCxDQUFZRixZQUFaLENBQWQ7O0FBRUEsb0JBQUdHLGFBQUgsQ0FBaUJILFlBQWpCLEVBQStCSixJQUEvQjs7QUFFQWhCLE1BQUl3QixJQUFKOztBQUVBLFNBQU9mLGNBQVA7QUFDRCxDOztBQXJERDs7OztBQUNBOzs7O0FBRUE7O0lBQVlULEc7O0FBQ1o7O0lBQVlPLE07O0FBQ1o7Ozs7Ozs7O0FBRUEsSUFBTVUsYUFBYSxTQUFiQSxVQUFhLE9BQXlCO0FBQUEsTUFBZkUsTUFBZSxRQUFmQSxNQUFlO0FBQUEsTUFBUEQsSUFBTyxRQUFQQSxJQUFPOztBQUMxQywyTkFRSUEsSUFSSixjQVNJQyxNQVRKO0FBYUQsQ0FkRCIsImZpbGUiOiJodG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSdcblxuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uLy4uLy4uL3V0aWxzL2xvZydcbmltcG9ydCAqIGFzIFJlbW92ZSBmcm9tICcuLi8uLi8uLi91dGlscy9yZW1vdmUnO1xuaW1wb3J0IHNjcmlwdCBmcm9tICcuL3NjcmlwdCdcblxuY29uc3QgbWFrZUxheW91dCA9IGZ1bmN0aW9uKHtzY3JpcHQsIGJvZHl9KSB7XG4gIHJldHVybiAoXG5gPCFET0NUWVBFIGh0bWw+XG48aHRtbD5cbiAgPGhlYWQ+XG4gICAgPG1ldGEgY2hhclNldD1cInV0Zi04XCIgLz5cbiAgICA8bWV0YSBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9bm9cIiBuYW1lPVwidmlld3BvcnRcIiAvPlxuICA8L2hlYWQ+XG4gIDxib2R5PlxuICAgICR7Ym9keX1cbiAgICAke3NjcmlwdH1cbiAgPC9ib2R5PlxuPC9odG1sPmBcbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihodG1sRmlsZXBhdGgsIHNyYywgYnVpbGQpIHtcbiAgbG9nLnBlbmRpbmcoYE1ha2luZyBodG1sICcke2h0bWxGaWxlcGF0aH0nYClcblxuICAvLyBSZWFkIGJvZHkgY29udGVudFxuICBjb25zdCBodG1sQ29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLnJlc29sdmUoc3JjLCBodG1sRmlsZXBhdGgpLCB7ZW5jb2Rpbmc6IFwidXRmOFwifSlcblxuICAvLyBHZXQganVzdCBwYXRoIGFuZCBuYW1lIGllOiAncG9wdXAvaW5kZXgnXG4gIGNvbnN0IGJhcmVGaWxlcGF0aCA9IFJlbW92ZS5leHRlbnNpb24oaHRtbEZpbGVwYXRoKVxuXG4gIGNvbnN0IHNjcmlwdEZpbGVwYXRoID0gYCR7YmFyZUZpbGVwYXRofS5qc2BcblxuICBjb25zdCB3ZWJwYWNrU2NyaXB0VXJsID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT0gXCJkZXZlbG9wbWVudFwiID8gcGF0aC5qb2luKFwiaHR0cHM6Ly9sb2NhbGhvc3Q6MzAwMVwiLCBzY3JpcHRGaWxlcGF0aCkgOiBgLyR7c2NyaXB0RmlsZXBhdGh9YFxuICBjb25zdCB3ZWJwYWNrU2NyaXB0ID0gYDxzY3JpcHQgc3JjPVwiJHt3ZWJwYWNrU2NyaXB0VXJsfVwiIGFzeW5jIGRlZmVyPjwvc2NyaXB0PmA7XG5cbiAgc2NyaXB0KHNjcmlwdEZpbGVwYXRoLCBidWlsZClcblxuICBjb25zdCBodG1sID0gbWFrZUxheW91dCh7XG4gICAgYm9keTogICBodG1sQ29udGVudCxcbiAgICBzY3JpcHQ6IHdlYnBhY2tTY3JpcHRcbiAgfSlcblxuICBjb25zdCBmdWxsSHRtbFBhdGggPSBwYXRoLmpvaW4oYnVpbGQsIGh0bWxGaWxlcGF0aClcblxuICBmcy5ta2RpcnNTeW5jKFJlbW92ZS5maWxlKGZ1bGxIdG1sUGF0aCkpXG5cbiAgZnMud3JpdGVGaWxlU3luYyhmdWxsSHRtbFBhdGgsIGh0bWwpXG5cbiAgbG9nLmRvbmUoKVxuXG4gIHJldHVybiBzY3JpcHRGaWxlcGF0aFxufVxuIl19