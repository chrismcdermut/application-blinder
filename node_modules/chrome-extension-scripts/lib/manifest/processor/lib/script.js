'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (scriptName, build) {
  if (process.env.NODE_ENV == 'development') {
    log.pending('Making injector \'' + scriptName + '\'');

    var injectorScript = makeInjector(scriptName);
    var injectorFilepath = _path2.default.join(build, scriptName);
    var injectorPath = Remove.file(injectorFilepath);

    (0, _fsExtra.mkdirsSync)(injectorPath);
    (0, _fsExtra.writeFileSync)(injectorFilepath, injectorScript, { encoding: 'utf8' });

    log.done();
  }
};

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _log = require('../../../utils/log');

var log = _interopRequireWildcard(_log);

var _remove = require('../../../utils/remove');

var Remove = _interopRequireWildcard(_remove);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var makeInjector = function makeInjector(scriptName) {
  return '// Injector file for \'' + scriptName + '\'\nvar context = this;\n\n// http://stackoverflow.com/questions/8403108/calling-eval-in-particular-context/25859853#25859853\nfunction evalInContext(js, context) {\n  return function() { return eval(js); }.call(context);\n}\n\nfunction reqListener () {\n  evalInContext(this.responseText, context)\n}\n\nvar request = new XMLHttpRequest();\nrequest.onload = reqListener;\nrequest.open("get", "https://localhost:3001/' + scriptName + '", true);\nrequest.send();';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tYW5pZmVzdC9wcm9jZXNzb3IvbGliL3NjcmlwdC5qcyJdLCJuYW1lcyI6WyJzY3JpcHROYW1lIiwiYnVpbGQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJsb2ciLCJwZW5kaW5nIiwiaW5qZWN0b3JTY3JpcHQiLCJtYWtlSW5qZWN0b3IiLCJpbmplY3RvckZpbGVwYXRoIiwiam9pbiIsImluamVjdG9yUGF0aCIsIlJlbW92ZSIsImZpbGUiLCJlbmNvZGluZyIsImRvbmUiXSwibWFwcGluZ3MiOiI7Ozs7OztrQkEyQmUsVUFBU0EsVUFBVCxFQUFxQkMsS0FBckIsRUFBNEI7QUFDekMsTUFBR0MsUUFBUUMsR0FBUixDQUFZQyxRQUFaLElBQXdCLGFBQTNCLEVBQTBDO0FBQ3hDQyxRQUFJQyxPQUFKLHdCQUFnQ04sVUFBaEM7O0FBRUEsUUFBTU8saUJBQW1CQyxhQUFhUixVQUFiLENBQXpCO0FBQ0EsUUFBTVMsbUJBQW1CLGVBQUtDLElBQUwsQ0FBVVQsS0FBVixFQUFpQkQsVUFBakIsQ0FBekI7QUFDQSxRQUFNVyxlQUFtQkMsT0FBT0MsSUFBUCxDQUFZSixnQkFBWixDQUF6Qjs7QUFFQSw2QkFBV0UsWUFBWDtBQUNBLGdDQUFjRixnQkFBZCxFQUFnQ0YsY0FBaEMsRUFBZ0QsRUFBQ08sVUFBVSxNQUFYLEVBQWhEOztBQUVBVCxRQUFJVSxJQUFKO0FBQ0Q7QUFDRixDOztBQXhDRDs7OztBQUNBOztBQUVBOztJQUFZVixHOztBQUNaOztJQUFZTyxNOzs7Ozs7QUFFWixJQUFNSixlQUFlLFNBQWZBLFlBQWUsQ0FBU1IsVUFBVCxFQUFxQjtBQUN4QyxxQ0FDdUJBLFVBRHZCLHlhQWU0Q0EsVUFmNUM7QUFrQkQsQ0FuQkQiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCB7IG1rZGlyc1N5bmMsIHdyaXRlRmlsZVN5bmN9IGZyb20gJ2ZzLWV4dHJhJ1xuXG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vLi4vLi4vdXRpbHMvbG9nJ1xuaW1wb3J0ICogYXMgUmVtb3ZlIGZyb20gJy4uLy4uLy4uL3V0aWxzL3JlbW92ZSc7XG5cbmNvbnN0IG1ha2VJbmplY3RvciA9IGZ1bmN0aW9uKHNjcmlwdE5hbWUpIHtcbiAgcmV0dXJuIChcbmAvLyBJbmplY3RvciBmaWxlIGZvciAnJHtzY3JpcHROYW1lfSdcbnZhciBjb250ZXh0ID0gdGhpcztcblxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84NDAzMTA4L2NhbGxpbmctZXZhbC1pbi1wYXJ0aWN1bGFyLWNvbnRleHQvMjU4NTk4NTMjMjU4NTk4NTNcbmZ1bmN0aW9uIGV2YWxJbkNvbnRleHQoanMsIGNvbnRleHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gZXZhbChqcyk7IH0uY2FsbChjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gcmVxTGlzdGVuZXIgKCkge1xuICBldmFsSW5Db250ZXh0KHRoaXMucmVzcG9uc2VUZXh0LCBjb250ZXh0KVxufVxuXG52YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xucmVxdWVzdC5vbmxvYWQgPSByZXFMaXN0ZW5lcjtcbnJlcXVlc3Qub3BlbihcImdldFwiLCBcImh0dHBzOi8vbG9jYWxob3N0OjMwMDEvJHtzY3JpcHROYW1lfVwiLCB0cnVlKTtcbnJlcXVlc3Quc2VuZCgpO2BcbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzY3JpcHROYW1lLCBidWlsZCkge1xuICBpZihwcm9jZXNzLmVudi5OT0RFX0VOViA9PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgbG9nLnBlbmRpbmcoYE1ha2luZyBpbmplY3RvciAnJHtzY3JpcHROYW1lfSdgKVxuXG4gICAgY29uc3QgaW5qZWN0b3JTY3JpcHQgICA9IG1ha2VJbmplY3RvcihzY3JpcHROYW1lKTtcbiAgICBjb25zdCBpbmplY3RvckZpbGVwYXRoID0gcGF0aC5qb2luKGJ1aWxkLCBzY3JpcHROYW1lKTtcbiAgICBjb25zdCBpbmplY3RvclBhdGggICAgID0gUmVtb3ZlLmZpbGUoaW5qZWN0b3JGaWxlcGF0aClcblxuICAgIG1rZGlyc1N5bmMoaW5qZWN0b3JQYXRoKVxuICAgIHdyaXRlRmlsZVN5bmMoaW5qZWN0b3JGaWxlcGF0aCwgaW5qZWN0b3JTY3JpcHQsIHtlbmNvZGluZzogJ3V0ZjgnfSlcblxuICAgIGxvZy5kb25lKClcbiAgfVxufVxuIl19