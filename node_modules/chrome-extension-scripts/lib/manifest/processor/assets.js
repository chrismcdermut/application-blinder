'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (manifest, _ref) {
  var buildPath = _ref.buildPath;
  var src = _ref.src;


  // Process icons
  if (manifest.icons && Object.keys(manifest.icons).length) {

    // Create asset directory
    var buildAssetsDirPath = _path2.default.join(buildPath, buildAssetsDir);
    _fsExtra2.default.mkdirsSync(buildAssetsDirPath);

    for (var name in manifest.icons) {
      processAsset(manifest.icons, name, src, buildPath);
    }
  }

  // TODO can there be more assets?

  return { manifest: manifest };
};

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _log = require('../../utils/log');

var log = _interopRequireWildcard(_log);

var _remove = require('../../utils/remove');

var Remove = _interopRequireWildcard(_remove);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var buildAssetsDir = "$assets";

var processAsset = function processAsset(object, key, src, buildPath) {
  var assetPath = object[key];

  log.pending('Processing asset \'' + assetPath + '\'');

  var buildAssetsDirPath = _path2.default.join(buildPath, buildAssetsDir);

  var assetSrcPath = _path2.default.join(src, assetPath);
  var buildAssetPath = _path2.default.join(buildAssetsDir, Remove.path(assetPath));
  var assetDestPath = _path2.default.join(buildPath, buildAssetPath);

  _fsExtra2.default.copySync(assetSrcPath, assetDestPath);

  object[key] = buildAssetPath;

  log.done('Done');

  return true;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYW5pZmVzdC9wcm9jZXNzb3IvYXNzZXRzLmpzIl0sIm5hbWVzIjpbIm1hbmlmZXN0IiwiYnVpbGRQYXRoIiwic3JjIiwiaWNvbnMiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiYnVpbGRBc3NldHNEaXJQYXRoIiwiam9pbiIsImJ1aWxkQXNzZXRzRGlyIiwibWtkaXJzU3luYyIsIm5hbWUiLCJwcm9jZXNzQXNzZXQiLCJsb2ciLCJSZW1vdmUiLCJvYmplY3QiLCJrZXkiLCJhc3NldFBhdGgiLCJwZW5kaW5nIiwiYXNzZXRTcmNQYXRoIiwiYnVpbGRBc3NldFBhdGgiLCJwYXRoIiwiYXNzZXREZXN0UGF0aCIsImNvcHlTeW5jIiwiZG9uZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2tCQTRCZSxVQUFTQSxRQUFULFFBQXFDO0FBQUEsTUFBakJDLFNBQWlCLFFBQWpCQSxTQUFpQjtBQUFBLE1BQU5DLEdBQU0sUUFBTkEsR0FBTTs7O0FBRWxEO0FBQ0EsTUFBSUYsU0FBU0csS0FBVCxJQUFrQkMsT0FBT0MsSUFBUCxDQUFZTCxTQUFTRyxLQUFyQixFQUE0QkcsTUFBbEQsRUFBMEQ7O0FBRXhEO0FBQ0EsUUFBTUMscUJBQXFCLGVBQUtDLElBQUwsQ0FBVVAsU0FBVixFQUFxQlEsY0FBckIsQ0FBM0I7QUFDQSxzQkFBR0MsVUFBSCxDQUFjSCxrQkFBZDs7QUFFQSxTQUFJLElBQUlJLElBQVIsSUFBZ0JYLFNBQVNHLEtBQXpCLEVBQWdDO0FBQzlCUyxtQkFBYVosU0FBU0csS0FBdEIsRUFBNkJRLElBQTdCLEVBQW1DVCxHQUFuQyxFQUF3Q0QsU0FBeEM7QUFDRDtBQUNGOztBQUVEOztBQUVBLFNBQU8sRUFBQ0Qsa0JBQUQsRUFBUDtBQUNELEM7O0FBN0NEOzs7O0FBQ0E7Ozs7QUFFQTs7SUFBWWEsRzs7QUFDWjs7SUFBWUMsTTs7Ozs7O0FBRVosSUFBTUwsaUJBQWlCLFNBQXZCOztBQUVBLElBQU1HLGVBQWUsU0FBZkEsWUFBZSxDQUFTRyxNQUFULEVBQWlCQyxHQUFqQixFQUFzQmQsR0FBdEIsRUFBMkJELFNBQTNCLEVBQXNDO0FBQ3pELE1BQU1nQixZQUFZRixPQUFPQyxHQUFQLENBQWxCOztBQUVBSCxNQUFJSyxPQUFKLHlCQUFpQ0QsU0FBakM7O0FBRUEsTUFBTVYscUJBQXFCLGVBQUtDLElBQUwsQ0FBVVAsU0FBVixFQUFxQlEsY0FBckIsQ0FBM0I7O0FBRUEsTUFBTVUsZUFBZSxlQUFLWCxJQUFMLENBQVVOLEdBQVYsRUFBZWUsU0FBZixDQUFyQjtBQUNBLE1BQU1HLGlCQUFpQixlQUFLWixJQUFMLENBQVVDLGNBQVYsRUFBMEJLLE9BQU9PLElBQVAsQ0FBWUosU0FBWixDQUExQixDQUF2QjtBQUNBLE1BQU1LLGdCQUFnQixlQUFLZCxJQUFMLENBQVVQLFNBQVYsRUFBcUJtQixjQUFyQixDQUF0Qjs7QUFFQSxvQkFBR0csUUFBSCxDQUFZSixZQUFaLEVBQTBCRyxhQUExQjs7QUFFQVAsU0FBT0MsR0FBUCxJQUFjSSxjQUFkOztBQUVBUCxNQUFJVyxJQUFKOztBQUVBLFNBQU8sSUFBUDtBQUNELENBbEJEIiwiZmlsZSI6ImFzc2V0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcy1leHRyYSdcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbmltcG9ydCAqIGFzIGxvZyBmcm9tICcuLi8uLi91dGlscy9sb2cnXG5pbXBvcnQgKiBhcyBSZW1vdmUgZnJvbSAnLi4vLi4vdXRpbHMvcmVtb3ZlJztcblxuY29uc3QgYnVpbGRBc3NldHNEaXIgPSBcIiRhc3NldHNcIlxuXG5jb25zdCBwcm9jZXNzQXNzZXQgPSBmdW5jdGlvbihvYmplY3QsIGtleSwgc3JjLCBidWlsZFBhdGgpIHtcbiAgY29uc3QgYXNzZXRQYXRoID0gb2JqZWN0W2tleV1cblxuICBsb2cucGVuZGluZyhgUHJvY2Vzc2luZyBhc3NldCAnJHthc3NldFBhdGh9J2ApXG5cbiAgY29uc3QgYnVpbGRBc3NldHNEaXJQYXRoID0gcGF0aC5qb2luKGJ1aWxkUGF0aCwgYnVpbGRBc3NldHNEaXIpXG5cbiAgY29uc3QgYXNzZXRTcmNQYXRoID0gcGF0aC5qb2luKHNyYywgYXNzZXRQYXRoKVxuICBjb25zdCBidWlsZEFzc2V0UGF0aCA9IHBhdGguam9pbihidWlsZEFzc2V0c0RpciwgUmVtb3ZlLnBhdGgoYXNzZXRQYXRoKSlcbiAgY29uc3QgYXNzZXREZXN0UGF0aCA9IHBhdGguam9pbihidWlsZFBhdGgsIGJ1aWxkQXNzZXRQYXRoKVxuXG4gIGZzLmNvcHlTeW5jKGFzc2V0U3JjUGF0aCwgYXNzZXREZXN0UGF0aClcblxuICBvYmplY3Rba2V5XSA9IGJ1aWxkQXNzZXRQYXRoXG5cbiAgbG9nLmRvbmUoYERvbmVgKVxuXG4gIHJldHVybiB0cnVlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hbmlmZXN0LCB7YnVpbGRQYXRoLCBzcmN9KSB7XG5cbiAgLy8gUHJvY2VzcyBpY29uc1xuICBpZiAobWFuaWZlc3QuaWNvbnMgJiYgT2JqZWN0LmtleXMobWFuaWZlc3QuaWNvbnMpLmxlbmd0aCkge1xuXG4gICAgLy8gQ3JlYXRlIGFzc2V0IGRpcmVjdG9yeVxuICAgIGNvbnN0IGJ1aWxkQXNzZXRzRGlyUGF0aCA9IHBhdGguam9pbihidWlsZFBhdGgsIGJ1aWxkQXNzZXRzRGlyKVxuICAgIGZzLm1rZGlyc1N5bmMoYnVpbGRBc3NldHNEaXJQYXRoKVxuXG4gICAgZm9yKGxldCBuYW1lIGluIG1hbmlmZXN0Lmljb25zKSB7XG4gICAgICBwcm9jZXNzQXNzZXQobWFuaWZlc3QuaWNvbnMsIG5hbWUsIHNyYywgYnVpbGRQYXRoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE8gY2FuIHRoZXJlIGJlIG1vcmUgYXNzZXRzP1xuXG4gIHJldHVybiB7bWFuaWZlc3R9XG59XG4iXX0=