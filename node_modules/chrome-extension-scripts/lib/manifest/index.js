'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
// import chokidar from 'chokidar'

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _processors = require('./processors');

var _processors2 = _interopRequireDefault(_processors);

var _log = require('../utils/log');

var log = _interopRequireWildcard(_log);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Manifest = function () {
  function Manifest(options) {
    _classCallCheck(this, Manifest);

    this.path = options.manifest;
    this.src = _path2.default.dirname(this.path);
    this.buildPath = options.output;
  }

  _createClass(Manifest, [{
    key: 'run',
    value: function run() {
      this.prepareBuildDir();
      this.processManifest();
      this.writeManifest();
    }

    // watch() {
    //   chokidar.watch(this.path).on('change', this.onChange)
    // }

    // onChange = (event, path) => {
    //   this.processManifest()
    // }

  }, {
    key: 'prepareBuildDir',
    value: function prepareBuildDir() {
      // Prepare clear build
      _fsExtra2.default.removeSync(this.buildPath);
      _fsExtra2.default.mkdirsSync(this.buildPath);
    }
  }, {
    key: 'writeManifest',
    value: function writeManifest() {
      var manifestPath = _path2.default.join(this.buildPath, "manifest.json");
      log.pending('Making \'build/manifest.json\'');
      _fsExtra2.default.writeFileSync(manifestPath, JSON.stringify(this.manifest, null, 2), { encoding: 'utf8' });
      log.done();
    }
  }, {
    key: 'loadManifest',
    value: function loadManifest() {
      return JSON.parse(_fsExtra2.default.readFileSync(this.path, 'utf8'));
    }
  }, {
    key: 'processManifest',
    value: function processManifest() {
      var _this = this;

      this.scripts = [];
      this.manifest = this.loadManifest();

      // Iterate over each processor and process manifest with it
      _processors2.default.forEach(function (processor) {
        _this.applyProcessorResult(processor(_this.manifest, _this));
      });

      return true;
    }
  }, {
    key: 'applyProcessorResult',
    value: function applyProcessorResult() {
      var _this2 = this;

      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      var manifest = _ref.manifest;
      var scripts = _ref.scripts;

      if (manifest) {
        this.manifest = manifest;
      }

      if (scripts) {
        // TODO validace na skripty
        // const pushScriptName = function(scriptName) {
        //   const scriptPath = path.join(paths.src, scriptName)
        //
        //   if(!existsSync(scriptPath)) {
        //     console.warn(colorred(`Missing script ${scriptPath}`))
        //
        //     return
        //   }
        //
        //   if(~scripts.indexOf(scriptName))
        //     return
        //
        //   scripts.push(scriptName)
        // }

        scripts.forEach(function (script) {
          _this2.scripts.push(script);
        });
      }
    }
  }]);

  return Manifest;
}();

exports.default = Manifest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYW5pZmVzdC9pbmRleC5qcyJdLCJuYW1lcyI6WyJsb2ciLCJNYW5pZmVzdCIsIm9wdGlvbnMiLCJwYXRoIiwibWFuaWZlc3QiLCJzcmMiLCJkaXJuYW1lIiwiYnVpbGRQYXRoIiwib3V0cHV0IiwicHJlcGFyZUJ1aWxkRGlyIiwicHJvY2Vzc01hbmlmZXN0Iiwid3JpdGVNYW5pZmVzdCIsInJlbW92ZVN5bmMiLCJta2RpcnNTeW5jIiwibWFuaWZlc3RQYXRoIiwiam9pbiIsInBlbmRpbmciLCJ3cml0ZUZpbGVTeW5jIiwiSlNPTiIsInN0cmluZ2lmeSIsImVuY29kaW5nIiwiZG9uZSIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwic2NyaXB0cyIsImxvYWRNYW5pZmVzdCIsImZvckVhY2giLCJwcm9jZXNzb3IiLCJhcHBseVByb2Nlc3NvclJlc3VsdCIsInNjcmlwdCIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFGQTs7OztBQUNBOzs7O0FBR0E7Ozs7QUFDQTs7SUFBWUEsRzs7Ozs7Ozs7SUFFU0MsUTtBQUNuQixvQkFBWUMsT0FBWixFQUFxQjtBQUFBOztBQUNuQixTQUFLQyxJQUFMLEdBQWFELFFBQVFFLFFBQXJCO0FBQ0EsU0FBS0MsR0FBTCxHQUFhLGVBQUtDLE9BQUwsQ0FBYSxLQUFLSCxJQUFsQixDQUFiO0FBQ0EsU0FBS0ksU0FBTCxHQUFpQkwsUUFBUU0sTUFBekI7QUFDRDs7OzswQkFFSztBQUNKLFdBQUtDLGVBQUw7QUFDQSxXQUFLQyxlQUFMO0FBQ0EsV0FBS0MsYUFBTDtBQUNEOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7c0NBRWtCO0FBQ2hCO0FBQ0Esd0JBQUdDLFVBQUgsQ0FBYyxLQUFLTCxTQUFuQjtBQUNBLHdCQUFHTSxVQUFILENBQWMsS0FBS04sU0FBbkI7QUFDRDs7O29DQUVlO0FBQ2QsVUFBTU8sZUFBZSxlQUFLQyxJQUFMLENBQVUsS0FBS1IsU0FBZixFQUEwQixlQUExQixDQUFyQjtBQUNBUCxVQUFJZ0IsT0FBSjtBQUNBLHdCQUFHQyxhQUFILENBQWlCSCxZQUFqQixFQUErQkksS0FBS0MsU0FBTCxDQUFlLEtBQUtmLFFBQXBCLEVBQThCLElBQTlCLEVBQW9DLENBQXBDLENBQS9CLEVBQXVFLEVBQUNnQixVQUFVLE1BQVgsRUFBdkU7QUFDQXBCLFVBQUlxQixJQUFKO0FBQ0Q7OzttQ0FFYztBQUNiLGFBQU9ILEtBQUtJLEtBQUwsQ0FBVyxrQkFBR0MsWUFBSCxDQUFnQixLQUFLcEIsSUFBckIsRUFBMkIsTUFBM0IsQ0FBWCxDQUFQO0FBQ0Q7OztzQ0FFaUI7QUFBQTs7QUFDaEIsV0FBS3FCLE9BQUwsR0FBZSxFQUFmO0FBQ0EsV0FBS3BCLFFBQUwsR0FBZ0IsS0FBS3FCLFlBQUwsRUFBaEI7O0FBRUE7QUFDQSwyQkFBV0MsT0FBWCxDQUFtQixVQUFDQyxTQUFELEVBQWU7QUFDaEMsY0FBS0Msb0JBQUwsQ0FDRUQsVUFBVSxNQUFLdkIsUUFBZixRQURGO0FBR0QsT0FKRDs7QUFNQSxhQUFPLElBQVA7QUFDRDs7OzJDQUU4QztBQUFBOztBQUFBLHVFQUFKLEVBQUk7O0FBQUEsVUFBekJBLFFBQXlCLFFBQXpCQSxRQUF5QjtBQUFBLFVBQWZvQixPQUFlLFFBQWZBLE9BQWU7O0FBQzdDLFVBQUdwQixRQUFILEVBQWE7QUFDWCxhQUFLQSxRQUFMLEdBQWdCQSxRQUFoQjtBQUNEOztBQUVELFVBQUdvQixPQUFILEVBQVk7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFBLGdCQUFRRSxPQUFSLENBQWdCLFVBQUNHLE1BQUQsRUFBWTtBQUMxQixpQkFBS0wsT0FBTCxDQUFhTSxJQUFiLENBQWtCRCxNQUFsQjtBQUNELFNBRkQ7QUFHRDtBQUNGOzs7Ozs7a0JBOUVrQjVCLFEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuLy8gaW1wb3J0IGNob2tpZGFyIGZyb20gJ2Nob2tpZGFyJ1xuXG5pbXBvcnQgcHJvY2Vzc29ycyBmcm9tICcuL3Byb2Nlc3NvcnMnXG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vdXRpbHMvbG9nJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYW5pZmVzdCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLnBhdGggID0gb3B0aW9ucy5tYW5pZmVzdFxuICAgIHRoaXMuc3JjICAgPSBwYXRoLmRpcm5hbWUodGhpcy5wYXRoKVxuICAgIHRoaXMuYnVpbGRQYXRoID0gb3B0aW9ucy5vdXRwdXRcbiAgfVxuXG4gIHJ1bigpIHtcbiAgICB0aGlzLnByZXBhcmVCdWlsZERpcigpXG4gICAgdGhpcy5wcm9jZXNzTWFuaWZlc3QoKVxuICAgIHRoaXMud3JpdGVNYW5pZmVzdCgpXG4gIH1cblxuICAvLyB3YXRjaCgpIHtcbiAgLy8gICBjaG9raWRhci53YXRjaCh0aGlzLnBhdGgpLm9uKCdjaGFuZ2UnLCB0aGlzLm9uQ2hhbmdlKVxuICAvLyB9XG5cbiAgLy8gb25DaGFuZ2UgPSAoZXZlbnQsIHBhdGgpID0+IHtcbiAgLy8gICB0aGlzLnByb2Nlc3NNYW5pZmVzdCgpXG4gIC8vIH1cblxuICBwcmVwYXJlQnVpbGREaXIoKSB7XG4gICAgLy8gUHJlcGFyZSBjbGVhciBidWlsZFxuICAgIGZzLnJlbW92ZVN5bmModGhpcy5idWlsZFBhdGgpXG4gICAgZnMubWtkaXJzU3luYyh0aGlzLmJ1aWxkUGF0aClcbiAgfVxuXG4gIHdyaXRlTWFuaWZlc3QoKSB7XG4gICAgY29uc3QgbWFuaWZlc3RQYXRoID0gcGF0aC5qb2luKHRoaXMuYnVpbGRQYXRoLCBcIm1hbmlmZXN0Lmpzb25cIik7XG4gICAgbG9nLnBlbmRpbmcoYE1ha2luZyAnYnVpbGQvbWFuaWZlc3QuanNvbidgKVxuICAgIGZzLndyaXRlRmlsZVN5bmMobWFuaWZlc3RQYXRoLCBKU09OLnN0cmluZ2lmeSh0aGlzLm1hbmlmZXN0LCBudWxsLCAyKSwge2VuY29kaW5nOiAndXRmOCd9KVxuICAgIGxvZy5kb25lKClcbiAgfVxuXG4gIGxvYWRNYW5pZmVzdCgpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmModGhpcy5wYXRoLCAndXRmOCcpKVxuICB9XG5cbiAgcHJvY2Vzc01hbmlmZXN0KCkge1xuICAgIHRoaXMuc2NyaXB0cyA9IFtdXG4gICAgdGhpcy5tYW5pZmVzdCA9IHRoaXMubG9hZE1hbmlmZXN0KClcblxuICAgIC8vIEl0ZXJhdGUgb3ZlciBlYWNoIHByb2Nlc3NvciBhbmQgcHJvY2VzcyBtYW5pZmVzdCB3aXRoIGl0XG4gICAgcHJvY2Vzc29ycy5mb3JFYWNoKChwcm9jZXNzb3IpID0+IHtcbiAgICAgIHRoaXMuYXBwbHlQcm9jZXNzb3JSZXN1bHQoXG4gICAgICAgIHByb2Nlc3Nvcih0aGlzLm1hbmlmZXN0LCB0aGlzKVxuICAgICAgKVxuICAgIH0pXG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgYXBwbHlQcm9jZXNzb3JSZXN1bHQoe21hbmlmZXN0LCBzY3JpcHRzfSA9IHt9KSB7XG4gICAgaWYobWFuaWZlc3QpIHtcbiAgICAgIHRoaXMubWFuaWZlc3QgPSBtYW5pZmVzdFxuICAgIH1cblxuICAgIGlmKHNjcmlwdHMpIHtcbiAgICAgIC8vIFRPRE8gdmFsaWRhY2UgbmEgc2tyaXB0eVxuICAgICAgLy8gY29uc3QgcHVzaFNjcmlwdE5hbWUgPSBmdW5jdGlvbihzY3JpcHROYW1lKSB7XG4gICAgICAvLyAgIGNvbnN0IHNjcmlwdFBhdGggPSBwYXRoLmpvaW4ocGF0aHMuc3JjLCBzY3JpcHROYW1lKVxuICAgICAgLy9cbiAgICAgIC8vICAgaWYoIWV4aXN0c1N5bmMoc2NyaXB0UGF0aCkpIHtcbiAgICAgIC8vICAgICBjb25zb2xlLndhcm4oY29sb3JyZWQoYE1pc3Npbmcgc2NyaXB0ICR7c2NyaXB0UGF0aH1gKSlcbiAgICAgIC8vXG4gICAgICAvLyAgICAgcmV0dXJuXG4gICAgICAvLyAgIH1cbiAgICAgIC8vXG4gICAgICAvLyAgIGlmKH5zY3JpcHRzLmluZGV4T2Yoc2NyaXB0TmFtZSkpXG4gICAgICAvLyAgICAgcmV0dXJuXG4gICAgICAvL1xuICAgICAgLy8gICBzY3JpcHRzLnB1c2goc2NyaXB0TmFtZSlcbiAgICAgIC8vIH1cblxuICAgICAgc2NyaXB0cy5mb3JFYWNoKChzY3JpcHQpID0+IHtcbiAgICAgICAgdGhpcy5zY3JpcHRzLnB1c2goc2NyaXB0KVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiJdfQ==