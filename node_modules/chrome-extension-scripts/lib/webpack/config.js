'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackCombineLoaders = require('webpack-combine-loaders');

var _webpackCombineLoaders2 = _interopRequireDefault(_webpackCombineLoaders);

var _precss = require('precss');

var _precss2 = _interopRequireDefault(_precss);

var _autoprefixer = require('autoprefixer');

var _autoprefixer2 = _interopRequireDefault(_autoprefixer);

var _remove = require('../utils/remove');

var Remove = _interopRequireWildcard(_remove);

var _plugin = require('../manifest/plugin');

var _plugin2 = _interopRequireDefault(_plugin);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// NOTE: Style preprocessors
// If you want to use any of style preprocessor, add related npm package + loader and uncomment following line
var styleLoaders = {
  'css': 'postcss-loader',
  'less': 'less-loader',
  'scss|sass': 'sass-loader'
};

function makeStyleLoaders() {
  return Object.keys(styleLoaders).map(function (ext) {
    // TODO: Autoprefixer just for webkit. You can guess why :D
    var prefix = 'css-loader?sourceMap&root=../assets';
    var loader = 'style-loader!' + prefix + '!' + styleLoaders[ext];;

    return {
      test: new RegExp('\\.(' + ext + ')$'),
      loader: loader
    };
  });
}

function config(Manifest) {
  var isDevelopment = process.env.NODE_ENV == "development" || true;

  return {
    ///// Lowlevel config
    cache: isDevelopment,
    debug: isDevelopment,
    devtool: isDevelopment ? 'cheap-module-eval-source-map' : '',
    node: { __dirname: true },

    ///// App config

    // Entry points in your app
    // There we use scripts from your manifest.json
    entry: {},

    // Output
    output: function () {
      var output = {
        path: Manifest.buildPath,
        filename: '[name].js'
      };

      if (isDevelopment) {
        output = _extends({}, output, {
          chunkFilename: '[name]-[chunkhash].js',
          publicPath: 'https://localhost:3001/'
        });
      }

      return output;
    }(),

    // Plugins
    plugins: function () {
      var plugins = [new _plugin2.default(Manifest, isDevelopment), new _webpack2.default.DefinePlugin({
        "global.GENTLY": false,
        "process.env": {
          APP_ENV: JSON.stringify(process.env.APP_ENV),
          NODE_ENV: JSON.stringify(process.env.NODE_ENV),
          IS_BROWSER: true
        }
      })];

      if (isDevelopment) {
        // Development plugins for hot reload
        plugins = [].concat(_toConsumableArray(plugins), [
        // NotifyPlugin,
        new _webpack2.default.HotModuleReplacementPlugin(),
        // Tell reloader to not reload if there is an error.
        new _webpack2.default.NoErrorsPlugin()]);
      } else {
        // Production plugins for optimizing code
        plugins = [].concat(_toConsumableArray(plugins), [new _webpack2.default.optimize.OccurrenceOrderPlugin(), new _webpack2.default.optimize.DedupePlugin(), new _webpack2.default.optimize.UglifyJsPlugin({
          compress: {
            screw_ie8: true, // React doesn't support IE8
            warnings: false
          },
          mangle: {
            screw_ie8: true
          },
          output: {
            comments: false,
            screw_ie8: true
          }
        }), function () {
          this.plugin("done", function (stats) {
            if (stats.compilation.errors && stats.compilation.errors.length) {
              console.log(stats.compilation.errors);
              process.exit(1);
            }
          });
        }]);
      }

      // NOTE: Custom plugins
      // if you need to exclude anything pro loading
      // plugins.push(new webpack.IgnorePlugin(/^(vertx|somethingelse)$/))

      return plugins;
    }(),

    // NOTE: Override external requires
    // If you need to change value of required (imported) module
    // for example if you dont want any module import 'net' for various reason like code only for non browser envirinment
    externals: {
      // net: function() {}
    },

    resolve: {
      extensions: ['', '.js', '.jsx', '.json'],
      modulesDirectories: ['src', 'node_modules'],
      root: [Manifest.src],
      alias: function () {
        // NOTE: Aliasing
        // If you want to override some path with another. Good for importing same version of React across different libraries
        var alias = {
          // "react-fa-icon": require.resolve(path.resolve(Manifest.src, 'lib/react-fa-icon'))
          // "lodash$": require.resolve(path.join(__dirname, '../node_modules/lodash')),
          // "promise$": require.resolve(path.join(__dirname, '../node_modules/bluebird')),
          // "bluebird$": require.resolve(path.join(__dirname, '../node_modules/bluebird')),
          // "immutable$": require.resolve(path.join(__dirname, '../node_modules/immutable')),
          // "react$": require.resolve(path.join(__dirname, '../node_modules/react'))
          // "react-dom$": require.resolve(path.join(__dirname, '../node_modules/react-dom'))
        };

        return alias;
      }()
    },

    // Loaders
    module: {
      loaders: function () {
        var loaders = [
        // Assets

        // TODO: just some assets I use often. Need to be more dynamic
        {
          test: /\.(png|jpg|jpeg|gif|svg|wav|woff|woff2|ttf|eot)/,
          exclude: exclude,
          loader: "url-loader?limit=1000000&name=[name]-[hash].[ext]"
        }].concat(_toConsumableArray(makeStyleLoaders()), [

        // Scripts
        function () {
          var base = {
            test: /\.jsx?$/,
            exclude: exclude
          };

          var babelQuery = {
            cacheDirectory: true,
            plugins: ["transform-decorators-legacy"],
            presets: ["react", "es2015", "es2016", "es2017", "stage-0"]
            // [
            //   [
            //     "target", {
            //       plugins: [ "transform-decorators-legacy" ],
            //       presets: [ "es2015", "es2016", "es2017", "stage-0" ],
            //       targets: [
            //         { name: "chrome", version: 52 }
            //       ]
            //     }
            //   ]
            // ]
          };

          if (isDevelopment) {
            babelQuery.presets = ["react-hmre"].concat(_toConsumableArray(babelQuery.presets));

            return _extends({}, base, {
              loader: 'babel-loader',
              query: babelQuery
              // loader: combineLoaders([
              //   {
              //     loader: 'react-hot-loader'
              //   },
              //   {
              //     loader: 'babel-loader',
              //     query: babelQuery
              //   }
              // ])
            });
          } else {
            return _extends({}, base, {
              loader: 'babel-loader',
              query: babelQuery
            });
          }
        }(),

        // Json
        {
          test: /\.json/,
          exclude: exclude,
          loader: "json-loader"
        }
        // NOTE: Add more loaders here
        ]);

        return loaders;
      }()
    },
    postcss: function postcss() {
      return [_precss2.default, _autoprefixer2.default];
    }
  };
}

exports.default = config;
//# sourceMappingURL=data:application/json;base64,