'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {

  // HACK
  // Override Webpack HOT code loader with my custom one.
  // Hot update is loaded via XMLHttpRequest and evaled in extension
  // context instead of including script tag with that hot update

  var JsonpMainTemplateRuntimePath = 'webpack/lib/JsonpMainTemplate.runtime.js';
  var originalJsonpMainTemplatePath = require.resolve(JsonpMainTemplateRuntimePath);
  var overridenJsonpMainTemplatePath = _path2.default.resolve(__dirname, '../..', 'templates/JsonpMainTemplate.runtime.js');
  var overridenJsonpMainTemplate = _fs2.default.readFileSync(overridenJsonpMainTemplatePath, { encoding: "utf8" });

  console.log(_safe2.default.green('Overriding \'' + JsonpMainTemplateRuntimePath + '\''));

  _fs2.default.writeFileSync(originalJsonpMainTemplatePath, overridenJsonpMainTemplate);

  var logApplyResultPath = 'webpack/hot/log-apply-result.js';
  var originalLogApplyResultPath = require.resolve(logApplyResultPath);
  var overridenLogApplyResultPath = _path2.default.resolve(__dirname, '../..', 'templates/log-apply-results.js');
  var overridenLogApplyResult = _fs2.default.readFileSync(overridenLogApplyResultPath, { encoding: "utf8" });

  console.log(_safe2.default.green('Overriding \'' + logApplyResultPath + '\''));

  _fs2.default.writeFileSync(originalLogApplyResultPath, overridenLogApplyResult);
};

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _safe = require('colors/safe');

var _safe2 = _interopRequireDefault(_safe);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93ZWJwYWNrL292ZXJyaWRlLmpzIl0sIm5hbWVzIjpbIkpzb25wTWFpblRlbXBsYXRlUnVudGltZVBhdGgiLCJvcmlnaW5hbEpzb25wTWFpblRlbXBsYXRlUGF0aCIsInJlcXVpcmUiLCJyZXNvbHZlIiwib3ZlcnJpZGVuSnNvbnBNYWluVGVtcGxhdGVQYXRoIiwiX19kaXJuYW1lIiwib3ZlcnJpZGVuSnNvbnBNYWluVGVtcGxhdGUiLCJyZWFkRmlsZVN5bmMiLCJlbmNvZGluZyIsImNvbnNvbGUiLCJsb2ciLCJncmVlbiIsIndyaXRlRmlsZVN5bmMiLCJsb2dBcHBseVJlc3VsdFBhdGgiLCJvcmlnaW5hbExvZ0FwcGx5UmVzdWx0UGF0aCIsIm92ZXJyaWRlbkxvZ0FwcGx5UmVzdWx0UGF0aCIsIm92ZXJyaWRlbkxvZ0FwcGx5UmVzdWx0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7a0JBSWUsWUFBVzs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsK0JBQWlDLDBDQUF2QztBQUNBLE1BQU1DLGdDQUFpQ0MsUUFBUUMsT0FBUixDQUFnQkgsNEJBQWhCLENBQXZDO0FBQ0EsTUFBTUksaUNBQWlDLGVBQUtELE9BQUwsQ0FBYUUsU0FBYixFQUF3QixPQUF4QixFQUFpQyx3Q0FBakMsQ0FBdkM7QUFDQSxNQUFNQyw2QkFBaUMsYUFBR0MsWUFBSCxDQUFnQkgsOEJBQWhCLEVBQWdELEVBQUNJLFVBQVUsTUFBWCxFQUFoRCxDQUF2Qzs7QUFFQUMsVUFBUUMsR0FBUixDQUFZLGVBQU1DLEtBQU4sbUJBQTJCWCw0QkFBM0IsUUFBWjs7QUFFQSxlQUFHWSxhQUFILENBQWlCWCw2QkFBakIsRUFBZ0RLLDBCQUFoRDs7QUFFQSxNQUFNTyxxQkFBOEIsaUNBQXBDO0FBQ0EsTUFBTUMsNkJBQThCWixRQUFRQyxPQUFSLENBQWdCVSxrQkFBaEIsQ0FBcEM7QUFDQSxNQUFNRSw4QkFBOEIsZUFBS1osT0FBTCxDQUFhRSxTQUFiLEVBQXdCLE9BQXhCLEVBQWlDLGdDQUFqQyxDQUFwQztBQUNBLE1BQU1XLDBCQUE4QixhQUFHVCxZQUFILENBQWdCUSwyQkFBaEIsRUFBNkMsRUFBQ1AsVUFBVSxNQUFYLEVBQTdDLENBQXBDOztBQUVBQyxVQUFRQyxHQUFSLENBQVksZUFBTUMsS0FBTixtQkFBMkJFLGtCQUEzQixRQUFaOztBQUVBLGVBQUdELGFBQUgsQ0FBaUJFLDBCQUFqQixFQUE2Q0UsdUJBQTdDO0FBRUQsQzs7QUE3QkQ7Ozs7QUFDQTs7OztBQUNBIiwiZmlsZSI6Im92ZXJyaWRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IGNvbG9yIGZyb20gJ2NvbG9ycy9zYWZlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgLy8gSEFDS1xuICAvLyBPdmVycmlkZSBXZWJwYWNrIEhPVCBjb2RlIGxvYWRlciB3aXRoIG15IGN1c3RvbSBvbmUuXG4gIC8vIEhvdCB1cGRhdGUgaXMgbG9hZGVkIHZpYSBYTUxIdHRwUmVxdWVzdCBhbmQgZXZhbGVkIGluIGV4dGVuc2lvblxuICAvLyBjb250ZXh0IGluc3RlYWQgb2YgaW5jbHVkaW5nIHNjcmlwdCB0YWcgd2l0aCB0aGF0IGhvdCB1cGRhdGVcblxuICBjb25zdCBKc29ucE1haW5UZW1wbGF0ZVJ1bnRpbWVQYXRoICAgPSAnd2VicGFjay9saWIvSnNvbnBNYWluVGVtcGxhdGUucnVudGltZS5qcydcbiAgY29uc3Qgb3JpZ2luYWxKc29ucE1haW5UZW1wbGF0ZVBhdGggID0gcmVxdWlyZS5yZXNvbHZlKEpzb25wTWFpblRlbXBsYXRlUnVudGltZVBhdGgpXG4gIGNvbnN0IG92ZXJyaWRlbkpzb25wTWFpblRlbXBsYXRlUGF0aCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLicsICd0ZW1wbGF0ZXMvSnNvbnBNYWluVGVtcGxhdGUucnVudGltZS5qcycpXG4gIGNvbnN0IG92ZXJyaWRlbkpzb25wTWFpblRlbXBsYXRlICAgICA9IGZzLnJlYWRGaWxlU3luYyhvdmVycmlkZW5Kc29ucE1haW5UZW1wbGF0ZVBhdGgsIHtlbmNvZGluZzogXCJ1dGY4XCJ9KVxuXG4gIGNvbnNvbGUubG9nKGNvbG9yLmdyZWVuKGBPdmVycmlkaW5nICcke0pzb25wTWFpblRlbXBsYXRlUnVudGltZVBhdGh9J2ApKVxuXG4gIGZzLndyaXRlRmlsZVN5bmMob3JpZ2luYWxKc29ucE1haW5UZW1wbGF0ZVBhdGgsIG92ZXJyaWRlbkpzb25wTWFpblRlbXBsYXRlKVxuXG4gIGNvbnN0IGxvZ0FwcGx5UmVzdWx0UGF0aCAgICAgICAgICA9ICd3ZWJwYWNrL2hvdC9sb2ctYXBwbHktcmVzdWx0LmpzJ1xuICBjb25zdCBvcmlnaW5hbExvZ0FwcGx5UmVzdWx0UGF0aCAgPSByZXF1aXJlLnJlc29sdmUobG9nQXBwbHlSZXN1bHRQYXRoKVxuICBjb25zdCBvdmVycmlkZW5Mb2dBcHBseVJlc3VsdFBhdGggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vLi4nLCAndGVtcGxhdGVzL2xvZy1hcHBseS1yZXN1bHRzLmpzJylcbiAgY29uc3Qgb3ZlcnJpZGVuTG9nQXBwbHlSZXN1bHQgICAgID0gZnMucmVhZEZpbGVTeW5jKG92ZXJyaWRlbkxvZ0FwcGx5UmVzdWx0UGF0aCwge2VuY29kaW5nOiBcInV0ZjhcIn0pXG5cbiAgY29uc29sZS5sb2coY29sb3IuZ3JlZW4oYE92ZXJyaWRpbmcgJyR7bG9nQXBwbHlSZXN1bHRQYXRofSdgKSlcblxuICBmcy53cml0ZUZpbGVTeW5jKG9yaWdpbmFsTG9nQXBwbHlSZXN1bHRQYXRoLCBvdmVycmlkZW5Mb2dBcHBseVJlc3VsdClcblxufVxuIl19